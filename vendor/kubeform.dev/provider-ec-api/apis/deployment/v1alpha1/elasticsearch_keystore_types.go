/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ElasticsearchKeystore struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ElasticsearchKeystoreSpec   `json:"spec,omitempty"`
	Status            ElasticsearchKeystoreStatus `json:"status,omitempty"`
}

type ElasticsearchKeystoreSpec struct {
	State *ElasticsearchKeystoreSpecResource `json:"state,omitempty" tf:"-"`

	Resource ElasticsearchKeystoreSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ElasticsearchKeystoreSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Optionally stores the remote keystore setting as a file. The default is false, which stores the keystore setting as string when value is a plain string
	// +optional
	AsFile *bool `json:"asFile,omitempty" tf:"as_file"`
	// Required deployment ID of the Deployment that holds the Elasticsearch cluster where the keystore setting will be written to
	DeploymentID *string `json:"deploymentID" tf:"deployment_id"`
	// Required name for the keystore setting, if the setting already exists in the Elasticsearch cluster, it will be overridden
	SettingName *string `json:"settingName" tf:"setting_name"`
	// Required value of this setting. This can either be a string or a JSON object that is stored as a JSON string in the keystore.
	Value *string `json:"-" sensitive:"true" tf:"value"`
}

type ElasticsearchKeystoreStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ElasticsearchKeystoreList is a list of ElasticsearchKeystores
type ElasticsearchKeystoreList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of ElasticsearchKeystore CRD objects
	Items []ElasticsearchKeystore `json:"items,omitempty"`
}
