/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Deployment struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DeploymentSpec   `json:"spec,omitempty"`
	Status            DeploymentStatus `json:"status,omitempty"`
}

type DeploymentSpecApmConfig struct {
	// Optionally enable debug mode for APM servers - defaults to false
	// +optional
	DebugEnabled *bool `json:"debugEnabled,omitempty" tf:"debug_enabled"`
	// An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_yaml' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (This field together with 'user_settings_override*' and 'system_settings' defines the total set of resource settings)
	// +optional
	UserSettingsJSON *string `json:"userSettingsJSON,omitempty" tf:"user_settings_json"`
	// An arbitrary JSON object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_yaml' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of resource settings)
	// +optional
	UserSettingsOverrideJSON *string `json:"userSettingsOverrideJSON,omitempty" tf:"user_settings_override_json"`
	// An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_json' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (These field together with 'user_settings_override*' and 'system_settings' defines the total set of resource settings)
	// +optional
	UserSettingsOverrideYaml *string `json:"userSettingsOverrideYaml,omitempty" tf:"user_settings_override_yaml"`
	// An arbitrary YAML object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_json' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of resource settings)
	// +optional
	UserSettingsYaml *string `json:"userSettingsYaml,omitempty" tf:"user_settings_yaml"`
}

type DeploymentSpecApmTopology struct {
	// +optional
	InstanceConfigurationID *string `json:"instanceConfigurationID,omitempty" tf:"instance_configuration_id"`
	// +optional
	Size *string `json:"size,omitempty" tf:"size"`
	// Optional size type, defaults to "memory".
	// +optional
	SizeResource *string `json:"sizeResource,omitempty" tf:"size_resource"`
	// +optional
	ZoneCount *int64 `json:"zoneCount,omitempty" tf:"zone_count"`
}

type DeploymentSpecApm struct {
	// Optionally define the Apm configuration options for the APM Server
	// +optional
	Config *DeploymentSpecApmConfig `json:"config,omitempty" tf:"config"`
	// +optional
	ElasticsearchClusterRefID *string `json:"elasticsearchClusterRefID,omitempty" tf:"elasticsearch_cluster_ref_id"`
	// +optional
	HttpEndpoint *string `json:"httpEndpoint,omitempty" tf:"http_endpoint"`
	// +optional
	HttpsEndpoint *string `json:"httpsEndpoint,omitempty" tf:"https_endpoint"`
	// +optional
	RefID *string `json:"refID,omitempty" tf:"ref_id"`
	// +optional
	Region *string `json:"region,omitempty" tf:"region"`
	// +optional
	ResourceID *string `json:"resourceID,omitempty" tf:"resource_id"`
	// +optional
	Topology []DeploymentSpecApmTopology `json:"topology,omitempty" tf:"topology"`
}

type DeploymentSpecElasticsearchConfig struct {
	// List of Elasticsearch supported plugins, which vary from version to version. Check the Stack Pack version to see which plugins are supported for each version. This is currently only available from the UI and [ecctl](https://www.elastic.co/guide/en/ecctl/master/ecctl_stack_list.html)
	// +optional
	// +kubebuilder:validation:MinItems=1
	Plugins []string `json:"plugins,omitempty" tf:"plugins"`
	// JSON-formatted user level "elasticsearch.yml" setting overrides
	// +optional
	UserSettingsJSON *string `json:"userSettingsJSON,omitempty" tf:"user_settings_json"`
	// JSON-formatted admin (ECE) level "elasticsearch.yml" setting overrides
	// +optional
	UserSettingsOverrideJSON *string `json:"userSettingsOverrideJSON,omitempty" tf:"user_settings_override_json"`
	// YAML-formatted admin (ECE) level "elasticsearch.yml" setting overrides
	// +optional
	UserSettingsOverrideYaml *string `json:"userSettingsOverrideYaml,omitempty" tf:"user_settings_override_yaml"`
	// YAML-formatted user level "elasticsearch.yml" setting overrides
	// +optional
	UserSettingsYaml *string `json:"userSettingsYaml,omitempty" tf:"user_settings_yaml"`
}

type DeploymentSpecElasticsearchExtension struct {
	// Extension name.
	Name *string `json:"name" tf:"name"`
	// Extension type, only `bundle` or `plugin` are supported.
	Type *string `json:"type" tf:"type"`
	// Bundle or plugin URL, the extension URL can be obtained from the `ec_deployment_extension.<name>.url` attribute or the API and cannot be a random HTTP address that is hosted elsewhere.
	Url *string `json:"url" tf:"url"`
	// Elasticsearch compatibility version. Bundles should specify major or minor versions with wildcards, such as `7.*` or `*` but **plugins must use full version notation down to the patch level**, such as `7.10.1` and wildcards are not allowed.
	Version *string `json:"version" tf:"version"`
}

type DeploymentSpecElasticsearchRemoteCluster struct {
	// Alias for this Cross Cluster Search binding
	// +optional
	Alias *string `json:"alias,omitempty" tf:"alias"`
	// Remote deployment ID
	DeploymentID *string `json:"deploymentID" tf:"deployment_id"`
	// Remote elasticsearch "ref_id", it is best left to the default value
	// +optional
	RefID *string `json:"refID,omitempty" tf:"ref_id"`
	// If true, skip the cluster during search when disconnected
	// +optional
	SkipUnavailable *bool `json:"skipUnavailable,omitempty" tf:"skip_unavailable"`
}

type DeploymentSpecElasticsearchSnapshotSource struct {
	// Name of the snapshot to restore. Use '__latest_success__' to get the most recent successful snapshot.
	// +optional
	SnapshotName *string `json:"snapshotName,omitempty" tf:"snapshot_name"`
	// ID of the Elasticsearch cluster that will be used as the source of the snapshot
	SourceElasticsearchClusterID *string `json:"sourceElasticsearchClusterID" tf:"source_elasticsearch_cluster_id"`
}

type DeploymentSpecElasticsearchTopologyAutoscaling struct {
	// Maximum size value for the maximum autoscaling setting.
	// +optional
	MaxSize *string `json:"maxSize,omitempty" tf:"max_size"`
	// Maximum resource type for the maximum autoscaling setting.
	// +optional
	MaxSizeResource *string `json:"maxSizeResource,omitempty" tf:"max_size_resource"`
	// Minimum size value for the minimum autoscaling setting.
	// +optional
	MinSize *string `json:"minSize,omitempty" tf:"min_size"`
	// Minimum resource type for the minimum autoscaling setting.
	// +optional
	MinSizeResource *string `json:"minSizeResource,omitempty" tf:"min_size_resource"`
	// Computed policy overrides set directly via the API or other clients.
	// +optional
	PolicyOverrideJSON *string `json:"policyOverrideJSON,omitempty" tf:"policy_override_json"`
}

type DeploymentSpecElasticsearchTopology struct {
	// Optional Elasticsearch autoscaling settings, such a maximum and minimum size and resources.
	// +optional
	Autoscaling *DeploymentSpecElasticsearchTopologyAutoscaling `json:"autoscaling,omitempty" tf:"autoscaling"`
	// Required topology ID from the deployment template
	ID *string `json:"ID" tf:"id"`
	// Computed Instance Configuration ID of the topology element
	// +optional
	InstanceConfigurationID *string `json:"instanceConfigurationID,omitempty" tf:"instance_configuration_id"`
	// The computed list of node roles for the current topology element
	// +optional
	NodeRoles []string `json:"nodeRoles,omitempty" tf:"node_roles"`
	// The node type for the Elasticsearch Topology element (data node)
	// +optional
	NodeTypeData *string `json:"nodeTypeData,omitempty" tf:"node_type_data"`
	// The node type for the Elasticsearch Topology element (ingest node)
	// +optional
	NodeTypeIngest *string `json:"nodeTypeIngest,omitempty" tf:"node_type_ingest"`
	// The node type for the Elasticsearch Topology element (master node)
	// +optional
	NodeTypeMaster *string `json:"nodeTypeMaster,omitempty" tf:"node_type_master"`
	// The node type for the Elasticsearch Topology element (machine learning node)
	// +optional
	NodeTypeMl *string `json:"nodeTypeMl,omitempty" tf:"node_type_ml"`
	// Optional amount of memory per node in the "<size in GB>g" notation
	// +optional
	Size *string `json:"size,omitempty" tf:"size"`
	// Optional size type, defaults to "memory".
	// +optional
	SizeResource *string `json:"sizeResource,omitempty" tf:"size_resource"`
	// Optional number of zones that the Elasticsearch cluster will span. This is used to set HA
	// +optional
	ZoneCount *int64 `json:"zoneCount,omitempty" tf:"zone_count"`
}

type DeploymentSpecElasticsearchTrustAccount struct {
	// The ID of the Account.
	AccountID *string `json:"accountID" tf:"account_id"`
	// If true, all clusters in this account will by default be trusted and the `trust_allowlist` is ignored.
	TrustAll *bool `json:"trustAll" tf:"trust_all"`
	// The list of clusters to trust. Only used when `trust_all` is false.
	// +optional
	TrustAllowlist []string `json:"trustAllowlist,omitempty" tf:"trust_allowlist"`
}

type DeploymentSpecElasticsearchTrustExternal struct {
	// The ID of the external trust relationship.
	RelationshipID *string `json:"relationshipID" tf:"relationship_id"`
	// If true, all clusters in this account will by default be trusted and the `trust_allowlist` is ignored.
	TrustAll *bool `json:"trustAll" tf:"trust_all"`
	// The list of clusters to trust. Only used when `trust_all` is false.
	// +optional
	TrustAllowlist []string `json:"trustAllowlist,omitempty" tf:"trust_allowlist"`
}

type DeploymentSpecElasticsearch struct {
	// Enable or disable autoscaling. Defaults to the setting coming from the deployment template. Accepted values are "true" or "false".
	// +optional
	Autoscale *string `json:"autoscale,omitempty" tf:"autoscale"`
	// The encoded Elasticsearch credentials to use in Beats or Logstash
	// +optional
	CloudID *string `json:"cloudID,omitempty" tf:"cloud_id"`
	// Optional Elasticsearch settings which will be applied to all topologies unless overridden on the topology element
	// +optional
	Config *DeploymentSpecElasticsearchConfig `json:"config,omitempty" tf:"config"`
	// Optional Elasticsearch extensions such as custom bundles or plugins.
	// +optional
	// +kubebuilder:validation:MinItems=1
	Extension []DeploymentSpecElasticsearchExtension `json:"extension,omitempty" tf:"extension"`
	// The Elasticsearch resource HTTP endpoint
	// +optional
	HttpEndpoint *string `json:"httpEndpoint,omitempty" tf:"http_endpoint"`
	// The Elasticsearch resource HTTPs endpoint
	// +optional
	HttpsEndpoint *string `json:"httpsEndpoint,omitempty" tf:"https_endpoint"`
	// Optional ref_id to set on the Elasticsearch resource
	// +optional
	RefID *string `json:"refID,omitempty" tf:"ref_id"`
	// The Elasticsearch resource region
	// +optional
	Region *string `json:"region,omitempty" tf:"region"`
	// Optional Elasticsearch remote clusters to configure for the Elasticsearch resource, can be set multiple times
	// +optional
	// +kubebuilder:validation:MinItems=1
	RemoteCluster []DeploymentSpecElasticsearchRemoteCluster `json:"remoteCluster,omitempty" tf:"remote_cluster"`
	// The Elasticsearch resource unique identifier
	// +optional
	ResourceID *string `json:"resourceID,omitempty" tf:"resource_id"`
	// Optional snapshot source settings. Restore data from a snapshot of another deployment.
	// +optional
	SnapshotSource *DeploymentSpecElasticsearchSnapshotSource `json:"snapshotSource,omitempty" tf:"snapshot_source"`
	// Optional topology element which must be set once but can be set multiple times to compose complex topologies
	// +optional
	// +kubebuilder:validation:MinItems=1
	Topology []DeploymentSpecElasticsearchTopology `json:"topology,omitempty" tf:"topology"`
	// Optional Elasticsearch account trust settings.
	// +optional
	TrustAccount []DeploymentSpecElasticsearchTrustAccount `json:"trustAccount,omitempty" tf:"trust_account"`
	// Optional Elasticsearch external trust settings.
	// +optional
	TrustExternal []DeploymentSpecElasticsearchTrustExternal `json:"trustExternal,omitempty" tf:"trust_external"`
}

type DeploymentSpecEnterpriseSearchConfig struct {
	// An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_yaml' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (This field together with 'user_settings_override*' and 'system_settings' defines the total set of resource settings)
	// +optional
	UserSettingsJSON *string `json:"userSettingsJSON,omitempty" tf:"user_settings_json"`
	// An arbitrary JSON object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_yaml' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of resource settings)
	// +optional
	UserSettingsOverrideJSON *string `json:"userSettingsOverrideJSON,omitempty" tf:"user_settings_override_json"`
	// An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_json' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (These field together with 'user_settings_override*' and 'system_settings' defines the total set of resource settings)
	// +optional
	UserSettingsOverrideYaml *string `json:"userSettingsOverrideYaml,omitempty" tf:"user_settings_override_yaml"`
	// An arbitrary YAML object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_json' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of resource settings)
	// +optional
	UserSettingsYaml *string `json:"userSettingsYaml,omitempty" tf:"user_settings_yaml"`
}

type DeploymentSpecEnterpriseSearchTopology struct {
	// +optional
	InstanceConfigurationID *string `json:"instanceConfigurationID,omitempty" tf:"instance_configuration_id"`
	// +optional
	NodeTypeAppserver *bool `json:"nodeTypeAppserver,omitempty" tf:"node_type_appserver"`
	// +optional
	NodeTypeConnector *bool `json:"nodeTypeConnector,omitempty" tf:"node_type_connector"`
	// +optional
	NodeTypeWorker *bool `json:"nodeTypeWorker,omitempty" tf:"node_type_worker"`
	// +optional
	Size *string `json:"size,omitempty" tf:"size"`
	// Optional size type, defaults to "memory".
	// +optional
	SizeResource *string `json:"sizeResource,omitempty" tf:"size_resource"`
	// +optional
	ZoneCount *int64 `json:"zoneCount,omitempty" tf:"zone_count"`
}

type DeploymentSpecEnterpriseSearch struct {
	// Optionally define the Enterprise Search configuration options for the Enterprise Search Server
	// +optional
	Config *DeploymentSpecEnterpriseSearchConfig `json:"config,omitempty" tf:"config"`
	// +optional
	ElasticsearchClusterRefID *string `json:"elasticsearchClusterRefID,omitempty" tf:"elasticsearch_cluster_ref_id"`
	// +optional
	HttpEndpoint *string `json:"httpEndpoint,omitempty" tf:"http_endpoint"`
	// +optional
	HttpsEndpoint *string `json:"httpsEndpoint,omitempty" tf:"https_endpoint"`
	// +optional
	RefID *string `json:"refID,omitempty" tf:"ref_id"`
	// +optional
	Region *string `json:"region,omitempty" tf:"region"`
	// +optional
	ResourceID *string `json:"resourceID,omitempty" tf:"resource_id"`
	// +optional
	Topology []DeploymentSpecEnterpriseSearchTopology `json:"topology,omitempty" tf:"topology"`
}

type DeploymentSpecKibanaConfig struct {
	// An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_yaml' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (This field together with 'user_settings_override*' and 'system_settings' defines the total set of resource settings)
	// +optional
	UserSettingsJSON *string `json:"userSettingsJSON,omitempty" tf:"user_settings_json"`
	// An arbitrary JSON object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_yaml' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of resource settings)
	// +optional
	UserSettingsOverrideJSON *string `json:"userSettingsOverrideJSON,omitempty" tf:"user_settings_override_json"`
	// An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_json' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (These field together with 'user_settings_override*' and 'system_settings' defines the total set of resource settings)
	// +optional
	UserSettingsOverrideYaml *string `json:"userSettingsOverrideYaml,omitempty" tf:"user_settings_override_yaml"`
	// An arbitrary YAML object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_json' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of resource settings)
	// +optional
	UserSettingsYaml *string `json:"userSettingsYaml,omitempty" tf:"user_settings_yaml"`
}

type DeploymentSpecKibanaTopology struct {
	// +optional
	InstanceConfigurationID *string `json:"instanceConfigurationID,omitempty" tf:"instance_configuration_id"`
	// +optional
	Size *string `json:"size,omitempty" tf:"size"`
	// Optional size type, defaults to "memory".
	// +optional
	SizeResource *string `json:"sizeResource,omitempty" tf:"size_resource"`
	// +optional
	ZoneCount *int64 `json:"zoneCount,omitempty" tf:"zone_count"`
}

type DeploymentSpecKibana struct {
	// Optionally define the Kibana configuration options for the Kibana Server
	// +optional
	Config *DeploymentSpecKibanaConfig `json:"config,omitempty" tf:"config"`
	// +optional
	ElasticsearchClusterRefID *string `json:"elasticsearchClusterRefID,omitempty" tf:"elasticsearch_cluster_ref_id"`
	// +optional
	HttpEndpoint *string `json:"httpEndpoint,omitempty" tf:"http_endpoint"`
	// +optional
	HttpsEndpoint *string `json:"httpsEndpoint,omitempty" tf:"https_endpoint"`
	// +optional
	RefID *string `json:"refID,omitempty" tf:"ref_id"`
	// +optional
	Region *string `json:"region,omitempty" tf:"region"`
	// +optional
	ResourceID *string `json:"resourceID,omitempty" tf:"resource_id"`
	// +optional
	Topology []DeploymentSpecKibanaTopology `json:"topology,omitempty" tf:"topology"`
}

type DeploymentSpecObservability struct {
	DeploymentID *string `json:"deploymentID" tf:"deployment_id"`
	// +optional
	Logs *bool `json:"logs,omitempty" tf:"logs"`
	// +optional
	Metrics *bool `json:"metrics,omitempty" tf:"metrics"`
	// +optional
	RefID *string `json:"refID,omitempty" tf:"ref_id"`
}

type DeploymentSpec struct {
	State *DeploymentSpecResource `json:"state,omitempty" tf:"-"`

	Resource DeploymentSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	SecretRef *core.LocalObjectReference `json:"secretRef,omitempty" tf:"-"`
}

type DeploymentSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Optional deployment alias that affects the format of the resource URLs
	// +optional
	Alias *string `json:"alias,omitempty" tf:"alias"`
	// Optional APM resource definition
	// +optional
	Apm *DeploymentSpecApm `json:"apm,omitempty" tf:"apm"`
	// +optional
	ApmSecretToken *string `json:"-" sensitive:"true" tf:"apm_secret_token"`
	// Required Deployment Template identifier to create the deployment from
	DeploymentTemplateID *string `json:"deploymentTemplateID" tf:"deployment_template_id"`
	// Required Elasticsearch resource definition
	Elasticsearch *DeploymentSpecElasticsearch `json:"elasticsearch" tf:"elasticsearch"`
	// Computed password obtained upon creating the Elasticsearch resource
	// +optional
	ElasticsearchPassword *string `json:"-" sensitive:"true" tf:"elasticsearch_password"`
	// Computed username obtained upon creating the Elasticsearch resource
	// +optional
	ElasticsearchUsername *string `json:"elasticsearchUsername,omitempty" tf:"elasticsearch_username"`
	// Optional Enterprise Search resource definition
	// +optional
	EnterpriseSearch *DeploymentSpecEnterpriseSearch `json:"enterpriseSearch,omitempty" tf:"enterprise_search"`
	// Optional Kibana resource definition
	// +optional
	Kibana *DeploymentSpecKibana `json:"kibana,omitempty" tf:"kibana"`
	// Optional name for the deployment
	// +optional
	Name *string `json:"name,omitempty" tf:"name"`
	// Optional observability settings. Ship logs and metrics to a dedicated deployment.
	// +optional
	Observability *DeploymentSpecObservability `json:"observability,omitempty" tf:"observability"`
	// Required ESS region where to create the deployment, for ECE environments "ece-region" must be set
	Region *string `json:"region" tf:"region"`
	// Optional request_id to set on the create operation, only use when previous create attempts return with an error and a request_id is returned as part of the error
	// +optional
	RequestID *string `json:"requestID,omitempty" tf:"request_id"`
	// Optional map of deployment tags
	// +optional
	Tags *map[string]string `json:"tags,omitempty" tf:"tags"`
	// Optional list of traffic filters to apply to this deployment.
	// +optional
	// +kubebuilder:validation:MinItems=1
	TrafficFilter []string `json:"trafficFilter,omitempty" tf:"traffic_filter"`
	// Required Elastic Stack version to use for all of the deployment resources
	Version *string `json:"version" tf:"version"`
}

type DeploymentStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DeploymentList is a list of Deployments
type DeploymentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Deployment CRD objects
	Items []Deployment `json:"items,omitempty"`
}
